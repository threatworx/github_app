#!/usr/bin/python3 -u 

import os
import sys
import getopt
import json
from multiprocessing import Pool

import utils

def usage():
    print("Usage is installation_unsuspend_request_handler [-f <path_to_event_data_json_file>]")

if __name__ == '__main__':

    os.nice(19)
    pid = os.getpid()

    json_file_name = None

    try:
        opts, args = getopt.getopt(sys.argv[1:], 'f:', ['file'])
    except getopt.GetoptError:
        usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage()
            sys.exit(1)
        elif opt in ('-f', '--file'):
            json_file_name = arg
        else:
            usage()
            sys.exit(2)

    if json_file_name is None:
        print("Required argument [file] is missing")
        usage()
        sys.exit(1)

    event_data = None
    with open(json_file_name, 'r') as fd:
        event_data = json.load(fd)

    config = utils.get_config()
    max_concurrency = config['github_app'].get('discovery_concurrency')
    if max_concurrency is None:
        max_concurrency = 2
    else:
        max_concurrency = int(max_concurrency)

    installation_id = event_data["installation"]["id"]

    # get the installation access token for our GitHub App
    installation_access_token = utils.get_installation_access_token(installation_id)

    # get the list of repos added to be processed
    temp_repos = utils.get_installation_repositories(installation_access_token['token'])

    repos = []
    for repo in temp_repos:
        repos.append((repo, installation_id))

    # discover the repos added as assets in TW
    with Pool(processes=max_concurrency) as pool:
        pool.map(utils.discover_repo_wrapper, repos)

    # Delete the event_data json file
    os.remove(json_file_name)

