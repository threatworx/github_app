#!/usr/bin/python3 -u 

import os
import sys
import getopt
import json
import tempfile

import utils

def usage():
    print("Usage is pull_request_handler [-f <path_to_event_data_json_file>]")

def get_changed_files_count(installation_access_token, pr_no):
    print("In get_changed_files_count")
    pr_url = "https://api.github.com/repos/%s/pulls/%s" % (base_repo_full_name, pr_no)
    headers = { "Accept": "application/vnd.github+json", "Authorization" : "Bearer "+installation_access_token['token'] }
    response = utils.requests_get(pr_url, headers, True)
    if response.status_code != 200:
        print("Error while retrieving count of files changed in Pull Request")
        return 3001 # Do this to trigger discovery and scan
    else:
        response = response.json()
        changed_files = response['changed_files']
        print("Pull request has %s changed files" % str(changed_files))
        return changed_files

def check_relevant_files(installation_access_token, pr_no):
    print("In check_relevant_files")
    pr_files_url = "https://api.github.com/repos/%s/pulls/%s/files?per_page=100&page=" % (base_repo_full_name, pr_no)
    headers = { "Accept": "application/vnd.github+json", "Authorization" : "Bearer "+installation_access_token['token'] }
    relevant_files = ["go.mod", "Cargo.toml", "pom.xml", "dependencies.gradle", "package-lock.json", "package.json", ".props", ".csproj", "packages.config", "yarn.lock", "gemfile.lock", "Gemfile.lock", "requirements.txt", ".jar", ".dll"]
    page_no = 1
    while (True):
        page_url = pr_files_url + str(page_no)
        response = utils.requests_get(page_url, headers, True)
        page_no = page_no + 1
        if response.status_code != 200:
            print("Encountered error while retrieving files from pull request")
            print(response.status_code)
            print(response.content)
            relevant_file_found = True
            # if something goes wrong, then should we run complete discovery and scan
            return True
        response = response.json()
        if len(response) == 0:
            # if there are zero entries then we are done
            print("No relevant files found...")
            return False
        for tfile in response:
            tfile_name = tfile['filename']
            for rfile in relevant_files:
                if tfile_name.endswith(rfile):
                    print("Found relevant file [%s]" % tfile_name)
                    return True
    print("No relevant files found...")
    return False

def add_pr_comment(comments_url, installation_access_token, pr_comment):
    #print(comments_url)
    #print(pr_comment)
    headers = { "Accept": "application/vnd.github+json", "Authorization" : "Bearer "+installation_access_token['token'] }
    data = { "body" : pr_comment }
    response = utils.requests_post(comments_url, headers, data, True)
    #print(response)
    if response is not None and response.status_code == 201:
        print("Added comment to pull_request")
    else:
        print("Error adding comment to pull_request")
        print(response.status_code)
        print(response.content)

os.nice(19)
pid = os.getpid()

#MAX_FILES_IN_GH_PR_FILES_API = 3000
json_file_name = None

try:
    opts, args = getopt.getopt(sys.argv[1:], 'f:', ['file'])
except getopt.GetoptError:
    usage()
    sys.exit(2)
for opt, arg in opts:
    if opt in ('-h', '--help'):
        usage()
        sys.exit(1)
    elif opt in ('-f', '--file'):
        json_file_name = arg
    else:
        usage()
        sys.exit(2)

if json_file_name is None:
    print("Required argument [file] is missing")
    usage()
    sys.exit(1)

event_data = None
with open(json_file_name, 'r') as fd:
    event_data = json.load(fd)

config = utils.get_config()
installation_id = event_data["installation"]["id"]

# get the installation access token for our GitHub App
installation_access_token = utils.get_installation_access_token(installation_id)

#print(event_data)

# Extract required values from pull request event
pr_no = str(event_data['pull_request']['number'])
base_repo_url = event_data['pull_request']['base']['repo']['clone_url']
base_branch = event_data['pull_request']['base']['ref']
base_repo_full_name = event_data['pull_request']['base']['repo']['full_name']
base_asset_id = "%s_%s" % (base_repo_full_name.replace('/','_'), base_branch.replace('/','_'))
head_repo_url = event_data['pull_request']['head']['repo']['clone_url']
head_branch = event_data['pull_request']['head']['ref']
head_repo_full_name = event_data['pull_request']['head']['repo']['full_name']
head_asset_id = "%s_%s_%s" % (head_repo_full_name.replace('/','_'), head_branch.replace('/','_'), pr_no)
comments_url = event_data['pull_request']['comments_url']

# check if any project dependency files have been modified as part of this pull request
#if get_changed_files_count(installation_access_token, pr_no) <= MAX_FILES_IN_GH_PR_FILES_API and check_relevant_files(installation_access_token, pr_no) == False:
#    pr_comment = "No relevant changes found in this Pull Request for vulnerability assessment"
#    add_pr_comment(comments_url, installation_access_token, pr_comment)
#    # Delete the event_data json file
#    os.remove(json_file_name)
#    sys.exit(0)

pr_comment = "ThreatWorx vulnerability assessment initiated"
add_pr_comment(comments_url, installation_access_token, pr_comment)

# get temp file for base asset inventory
basefile = tempfile.NamedTemporaryFile()

# Discover base asset locally without scan
ret_val = utils.discover_repo(installation_access_token['token'], base_repo_url, base_branch, base_asset_id, True, basefile.name)
if ret_val == False:
    print("Error while discovering asset for base branch [%s]" % base_branch)
    os.remove(json_file_name)
    pr_comment = "ThreatWorx vulnerability assessment encountered an error"
    add_pr_comment(comments_url, installation_access_token, pr_comment)
    sys.exit(1)

# get the installation access token for our GitHub App
installation_access_token = utils.get_installation_access_token(installation_id)

# get temp file for head asset inventory
headfile = tempfile.NamedTemporaryFile()

# Discover head asset locally without scan
ret_val = utils.discover_repo(installation_access_token['token'], head_repo_url, head_branch, head_asset_id, True, headfile.name)
if ret_val == False:
    print("Error while discovering asset for head branch [%s]" % head_branch)
    os.remove(json_file_name)
    pr_comment = "ThreatWorx vulnerability assessment encountered an error"
    add_pr_comment(comments_url, installation_access_token, pr_comment)
    sys.exit(1)

# create diff json for base and head
diff_file_name = utils.create_diff_json(basefile.name, headfile.name)
if diff_file_name == None:
    print("No diff to proess")
    os.remove(json_file_name)
    pr_comment = "No relevant changes found in this Pull Request for vulnerability assessment"
    add_pr_comment(comments_url, installation_access_token, pr_comment)
    sys.exit(1)

# upload diff asset and run a scan
ret_val = utils.scan_diff(head_asset_id, diff_file_name)
if ret_val == False:
    print("Error scanning diff asset")
    os.remove(json_file_name)
    os.remove(diff_file_name)
    utils.delete_asset(head_asset_id)
    pr_comment = "ThreatWorx vulnerability assessment encountered an error"
    add_pr_comment(comments_url, installation_access_token, pr_comment)
    sys.exit(1)

# Call TW API to get vulnerability impact for diff asset 
impacts = utils.get_impacts(head_asset_id)
if impacts is None:
    print("Error getting vuln impacts")
    os.remove(json_file_name)
    os.remove(diff_file_name)
    utils.delete_asset(head_asset_id)
    pr_comment = "ThreatWorx vulnerability assessment encountered an error"
    add_pr_comment(comments_url, installation_access_token, pr_comment)
    sys.exit(1)

# get the installation access token for our GitHub App
installation_access_token = utils.get_installation_access_token(installation_id)

# Update PR request with information
pr_comment = utils.compose_pr_comment(impacts)
add_pr_comment(comments_url, installation_access_token, pr_comment)

# Delete temp asset
utils.delete_asset(head_asset_id)

# Delete the event_data json file
os.remove(json_file_name)
os.remove(diff_file_name)
